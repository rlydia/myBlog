<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WebSocket与Socket.io</title>
    <url>/2019/11/25/WebSocket%E4%B8%8ESocket-io/</url>
    <content><![CDATA[<h1 id="即时通信技术"><a href="#即时通信技术" class="headerlink" title="即时通信技术"></a>即时通信技术</h1><blockquote>
<p>相关文章:</p>
<p><a href="https://www.cnblogs.com/huchong/p/8595644.html" target="_blank" rel="noopener">轮询、长轮询、长连接、websocket</a></p>
<p><a href="https://www.zhihu.com/question/20215561" target="_blank" rel="noopener">WebSocket 是什么原理？为什么可以实现持久连接？-知乎</a></p>
<p><a href="https://www.jianshu.com/p/100b82730e15" target="_blank" rel="noopener">SSE(服务器推送事件)的介绍、问题及解决</a></p>
<p><a href="https://github.com/onlyliuxin/coding2017/issues/497">为什么不直接使用socket ,还要定义一个新的websocket 的呢？ </a></p>
<p>四种Web即时通信技术对比：</p>
<ul>
<li>从兼容性角度考虑，短轮询&gt;长轮询(comet)&gt;长连接(SSE)&gt;WebSocket；</li>
<li>从性能方面考虑，WebSocket&gt;长连接SSE&gt;长轮询&gt;短轮询。</li>
</ul>
<p>在HTTP基础上实现：短轮询,长轮询,长连接SSE（Sever-Sent Event） 服务器推送事件;</p>
</blockquote>
<h2 id="ajax-轮询-长轮询"><a href="#ajax-轮询-长轮询" class="headerlink" title="(ajax)轮询, 长轮询"></a>(ajax)轮询, 长轮询</h2><p>短轮询与长轮询两者都是 <strong>基于HTTP的“被动型服务器”</strong> : 服务器不会主动推送信息，而是在客户端发送ajax请求后进行返回的响应。</p>
<p><strong>短轮询</strong>： 浏览器每隔一段时间向浏览器发送http请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。 </p>
<p><strong>长轮询</strong>：浏览器向浏览器发送http请求，服务器端在收到请求后，服务器不会直接进行响应，而是先将这个请求挂起 判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则<strong>到达一定的时间限制</strong>(服务器端设置)才返回。 客户端JavaScript响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。</p>
<blockquote>
<p>目前微信登录二维码扫描还是用的长轮询 (为兼容老浏览器)；</p>
</blockquote>
<p>轮询由于需要不断的建立http连接，严重浪费了服务器端和客户端的资源。而长轮询和短轮询比起来，明显减少了很多不必要的http请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。 </p>
<h2 id="长连接-SSE-与WebSocket协议"><a href="#长连接-SSE-与WebSocket协议" class="headerlink" title="长连接(SSE)与WebSocket协议"></a>长连接(SSE)与WebSocket协议</h2><p>服务器对浏览器推送消息的方法：SSE与WebSocket;</p>
<p><strong>长连接(SSE)</strong>：</p>
<p><a href="https://www.jianshu.com/p/100b82730e15" target="_blank" rel="noopener">SSE(服务器推送事件)的介绍、问题及解决</a></p>
<p>HTML5新增功能基于http协议,  不需要客户端发送请求，可以实现只要服务器端数据有更新，就可以马上发送到客户端；且SSE实现简单，不需要依赖其他插件。</p>
<p><strong>WebSocket协议</strong>:</p>
<p>(WebSocket也是一种长连接的模式)</p>
<p>WebSocket是Html5定义的一个新协议，可以实现服务器与客户端之间全双工通信。 其是一个<strong>持久化</strong>的协议，相对于HTTP这种<strong>非持久</strong>的协议来说；可理解为WebSocket是HTTP的优化。</p>
<blockquote>
<p> <code>websocket</code>的协议是在TCP/IP协议簇的应用层，和<code>http</code>在同一层。 </p>
</blockquote>
<p>WebSocket协议基于TCP协议；客户端先发送一个HTTP请求给服务端，该请求要求服务器 将该HTTP连接升级为WS连接，在服务器端响应ok后 它们之间便不再走HTTP报文了; 之后该连接上走websocket协议，并且不会断开，信息在两端交换 (websocket协议是以消息为单位–有点像UDP，但websocket是可靠 并且有序的)；</p>
<ul>
<li>UDP是任意两个端口之间可以随意的发送，websocket则是只能在建立连接的两端交换消息(<strong>交换的是消息，而不是字节流</strong>)；</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat, superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br><span class="line"><span class="attribute">Origin</span>: http://example.com</span><br></pre></td></tr></table></figure>

<p>优点是实现了双向通信，缺点是服务器端的逻辑非常复杂 。</p>
<h1 id="WebSocket与Socket"><a href="#WebSocket与Socket" class="headerlink" title="WebSocket与Socket"></a>WebSocket与Socket</h1><blockquote>
<p><a href="https://www.jianshu.com/p/42260a2575f8" target="_blank" rel="noopener">1小时教你理解HTTP，TCP，UDP，Socket，WebSocket</a></p>
<p><a href="https://www.cnblogs.com/devinzhang/archive/2012/01/13/2321826.html" target="_blank" rel="noopener">Socket连接与HTTP连接</a></p>
</blockquote>
<p>五层模型: 应用层， 传输层， 网络层， 数据链路层， 物理层；</p>
<p>HTTP，WebSocket, TCP, UDP, IP 都是协议； </p>
<ul>
<li><p>HTTP，WebSocket 属于应用层，都是基于TCP协议；WebSocket可理解为HTTP的优化 </p>
<p>— HTTP连接(短连接)</p>
</li>
<li><p>TCP, UDP 属于传输层 </p>
<p>— TCP连接(长连接)</p>
</li>
<li><p>IP 协议属于传输层</p>
</li>
</ul>
<p>TCP/IP协议族 是不同协议的组合；</p>
<p>Socket套接字，本质是API 而不是协议，是对TCP/IP协议栈的封装 以建立Socket连接；</p>
<ul>
<li>创建Socket连接可以指定不同的传输层协议 – 所以当采用TCP建立连接时，该Socket连接就视为一个TCP连接。而采用UDP则是无连接的。 </li>
</ul>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/7.png" class="" title="image">



<h1 id="WebSocket协议建立连接的过程"><a href="#WebSocket协议建立连接的过程" class="headerlink" title="WebSocket协议建立连接的过程"></a>WebSocket协议建立连接的过程</h1><h2 id="怎样使用websocket"><a href="#怎样使用websocket" class="headerlink" title="怎样使用websocket"></a>怎样使用websocket</h2><ul>
<li><p>服务器需先支持 升级websocket的请求，而node自带的http服务器是没有这个功能的-&gt; 会返回404； =&gt; 则在npm上 找第三方的包 <a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">ws包: a Node.js WebSocket library</a> (其需要 对HTTP协议/服务器 本身做一个接管，该接管在node中有相应的事件–这个包监听了 )</p>
<p>普通的请求触发的是request事件, 而一个升级请求触发的是upgrade事件 <a href="https://nodejs.org/dist/latest-v12.x/docs/api/http.html" target="_blank" rel="noopener">node http.server</a></p>
</li>
</ul>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/8.png" class="" title="image">



<p>怎样使用ws包？</p>
<ul>
<li>将一个http.server对象传给它，其在该对象上监听upgrade事件；</li>
</ul>
<h2 id="WebSocket协议建立连接的过程-1"><a href="#WebSocket协议建立连接的过程-1" class="headerlink" title="WebSocket协议建立连接的过程"></a>WebSocket协议建立连接的过程</h2><p>在浏览器端，websocket协议是从http升级来的(在连接协商阶段依然是一个http请求)；并且<strong>websocket协议 不限制跨域</strong>，除非有CSP(Content Security Policy)内容安全策略  限制页面中的JS连接/加载东西，  =&gt; 于是可在任何网站给我服务器 发送websocket连接；</p>
<p>让websocket服务器与HTTP服务器集成在一个server上：</p>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/1.png" class="" title="image">

<p>ws-example文件夹下的<code>ws-server.js</code>文件：</p>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/2.png" class="" title="image">

<ul>
<li><p>若网页是通过https加载的，那么也只能用wss; wss为走在TLS(安全传输层协议)上的ws, 如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ws = new WebSocket(&apos;wss://expressjs.com/foo/&apos;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>第一次发送出去的HTTP请求头：（客户端希望这个连接能够被升级upgrade 为websocket协议）</p>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/3.png" class="" title="image">

<p>若服务器能支持将协议升级的话，便会响应：</p>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/4.png" class="" title="image">

<hr>
<p>(发送的数据还可是二进制数据Buffer) WebSocket不能直接发送对象，需是字符串</p>
<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/5.png" class="" title="image">

<img src="/2019/11/25/WebSocket%E4%B8%8ESocket-io/6.png" class="" title="image">

<p>WebSocket(交换的是消息)建立连接后，TCP连接便不会断了，并且之间发送数据为二进制；(TCP协议为纯粹的字节流)</p>
<p>为什么WebSocket可以实现持久连接？</p>
<ul>
<li>因其底层的TCP连接根本就没有断；</li>
</ul>
<p>既然有TCP协议为啥还要有WebSocket呢？</p>
<ul>
<li>TCP连接一个包只能发1500个字节，对于大一点的包会进行分包，分包后发送收到的数据次序可能有改变；而用WebSocket发送则不会有这个问题 — 大量数据 分包后收到数据次序并不会改变；</li>
</ul>
<h2 id="WebSocket聊天室"><a href="#WebSocket聊天室" class="headerlink" title="WebSocket聊天室"></a>WebSocket聊天室</h2><blockquote>
<p>代码：<a href="">ws-example &gt; ws-server文件夹</a></p>
</blockquote>
<p>WebSocket中不能直接发送对象— 服务端<code>JSON.stringify(mes)</code>， 客户端<code>JSON.parse(e.data)</code></p>
<p>WebSocket的send方法目前只能发送三类数据，包含UTF-8的string类型（而UTF-16指的是JavaScript中String的编码存储方式），ArrayBuffer和Blob。</p>
<p><a href="https://juejin.im/post/5abdc38ef265da2375070008#heading-6" target="_blank" rel="noopener">WebSocket系列之JavaScript字符串如何与二进制数据间进行互相转换</a></p>
<p>基于WebSocket更进一步的封装，提供了广播事件的机制(远程事件)； =&gt; socketio (比原始的WebSocket好用很多)</p>
<h1 id="Socket-IO-对WebSocket的封装"><a href="#Socket-IO-对WebSocket的封装" class="headerlink" title="Socket.IO (对WebSocket的封装)"></a>Socket.IO (对WebSocket的封装)</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/23467317" target="_blank" rel="noopener">WebSocket 与 Socket.IO</a></p>
<p><a href="https://socket.io/" target="_blank" rel="noopener">socket.io</a> 是一个封装了 Websocket、基于 Node 的 JavaScript 框架，包含 client 的 JavaScript 和 server 的 Node。其 其屏蔽了所有底层细节，让顶层调用非常简单。 </p>
</blockquote>
<p>因并不是所有浏览器都支持WebSocket，该库支持了一系列的降级功能；以通过这些功能选择来与浏览器保持类似长连接的功能。</p>
<ul>
<li>Websocket</li>
<li>Adobe® Flash® Socket</li>
<li>AJAX long polling</li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>JSONP Polling</li>
</ul>
<h2 id="Socket-IO聊天室"><a href="#Socket-IO聊天室" class="headerlink" title="Socket.IO聊天室"></a>Socket.IO聊天室</h2><blockquote>
<p>代码：<a href="">ws-example &gt; socket.io-wsServer文件夹</a></p>
</blockquote>
<p>socket.io带来的优势：</p>
<ul>
<li>发送数据时 可直接发送对象; 而不用像之前一样 先将对象转为字符串，在将字符串转为对象；</li>
<li><code>socket.on(&#39;my other event&#39;, function() {})</code> 可自定义事件；这样就可不在数据中设置type字段；</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript稀疏数组</title>
    <url>/2019/11/14/JavaScript%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<blockquote>
<p>缘：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">Array.prototype.forEach() -MDN</a></p>
<p><code>forEach</code> 方法按升序为数组中含有效值的每一项执行一次<code>callback</code> 函数，那些已删除或者未初始化的项将被跳过（例如在<strong>稀疏数组</strong>上）。 </p>
</blockquote>
<p>JavaScript中的数组是稀疏的, 即数组中的元素之间可以有空隙。因为Javascript数组并不常规，所有的数组其实是对象，即一个数组就是一个键值映射。</p>
<p>JavaScript中的对象就是字符串到任意值的键值对，而数组只不过会自动管理“数字”属性和length属性，所以JavaScript中的数组根本没有索引,因索引应该是数字,而JavaScript中数组的索引其实是字符串。例如，<code>arr[1]</code>其实就是<code>arr[&quot;1&quot;]</code>,给<code>arr[&quot;1000&quot;] = 1</code>,<code>arr.length</code>也会自动变为1001。</p>
<p>目前,ES6中已经有了类似于Java等语言的Map类型,键可以是任意类型的值。</p>
<ul>
<li><p>什么是稀疏数组</p>
</li>
<li><p>稀疏数组的创建，一些其他情况也会生成稀疏数组 =&gt; 遍历时会跳过稀疏数组(forEach, map)=&gt; 压缩稀疏数组(filter)</p>
<p><code>var a = new Array(3)</code></p>
</li>
<li><p>创建密集数组  </p>
<p><code>var a = Array.apply(null, Array(3));</code></p>
</li>
<li><p>对创建密集数组方法的封装 </p>
<p><code>_.range</code></p>
</li>
</ul>
<blockquote>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/4bce06e283cf" target="_blank" rel="noopener">javascript稀疏数组(sparse array)</a></p>
<p><a href="https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html" target="_blank" rel="noopener">[译]JavaScript中的稀疏数组与密集数组</a></p>
<p><a href="https://2ality.com/2012/06/dense-arrays.html" target="_blank" rel="noopener">JavaScript: sparse arrays vs. dense arrays</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS生成指定范围随机数</title>
    <url>/2019/11/13/JS%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>相关面试题：</p>
<p>(01) 用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值</p>
</blockquote>
<h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random()    <span class="comment">// [0,1) 伪随机数 浮点数</span></span><br><span class="line"><span class="built_in">Math</span>.ceil()      <span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor()     <span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()     <span class="comment">// 四舍五入</span></span><br><span class="line"><span class="built_in">parseInt</span>()  <span class="comment">// 取整数部分</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);    <span class="comment">// [0,10] 但基本相当于获取从1到10的随机整数，因取0的概率极小。</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>);   <span class="comment">// [0,10) 可均衡获取0到9的随机整数。</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">10</span>);   <span class="comment">// [0,10] 基本均衡获取0到10的随机整数，其中获取最小值0和最大值10的几率少一半。</span></span><br><span class="line"><span class="comment">// 因结果在0~0.4 为0，0.5到1.4为1...8.5到9.4为9，9.5到9.9为10。所以头尾的分布区间只有其他数字的一半。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random()  <span class="comment">// [0, 1) 随机浮点数</span></span><br><span class="line"><span class="built_in">Math</span>.random()*(m-n) + n  <span class="comment">// [n, m) 随机浮点数； m-n可看为是length</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random())    <span class="comment">// 随机获取0或1，获取几率较均衡</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*m)  <span class="comment">// 随机获取[0,m)、即[0, m-1]之间整数，获取均衡</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*m)+<span class="number">1</span>  <span class="comment">// 随机获取[1,m) 、即[1, m-1]之间整数，获取均衡</span></span><br></pre></td></tr></table></figure>

<h2 id="生成指定范围内的随机整数："><a href="#生成指定范围内的随机整数：" class="headerlink" title="生成指定范围内的随机整数："></a>生成指定范围内的随机整数：</h2><p>[min, max) :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*(max-min)) + min </span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min)) + min</span><br></pre></td></tr></table></figure>

<p>[min, max] -&gt; 相当于[min, max+1) :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.floor(Math.random()*(max+1-min))+min</span><br></pre></td></tr></table></figure>

<p>(min, max]：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.ceil(Math.random()*(max-min)) + min</span><br></pre></td></tr></table></figure>

<p>(min, max) -&gt; 相当于[min+1, max) ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.floor(Math.random()*(max-(min+1)) + min+1</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomInt</span>(<span class="params">max,min</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*(max-min)) + min </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考：<br><a href="https://www.cnblogs.com/starof/p/4988516.html" target="_blank" rel="noopener">https://www.cnblogs.com/starof/p/4988516.html</a><br><a href="https://www.hangge.com/blog/cache/detail_1872.html" target="_blank" rel="noopener">https://www.hangge.com/blog/cache/detail_1872.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode141,142环形链表快慢指针解法</title>
    <url>/2019/11/13/Leetcode141-142%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<p>Leetcode 141 与 Leetcode 142 题类似，Leetcode 141 为判断链表是否有环，而Leetcode 142在判断若有环基础上返回起始环的节点。 </p>
<h2 id="Leetcode-141"><a href="#Leetcode-141" class="headerlink" title="Leetcode 141"></a>Leetcode 141</h2><blockquote>
<p>Given a linked list, determine if it has a cycle in it.<br>Follow up:<br>Can you solve it without using extra space? </p>
</blockquote>
<p>分析： 设置一个快指针fast、一个慢指针slow。由于我们知道若有环，快慢指针将一直”跑”下，没有终点，并且快慢指针一定会相遇；如同在没有设置终点暂停的情况下，两人从同一起点出发以不同速度在环形跑道上跑步，跑得快的同学最终会出现比跑得慢的同学多跑一圈并且相遇的情形。 这里设置为快指针跑两步时，慢指针跑一步，两者速度比为2:1。 </p>
<p>Python代码： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        fast = slow = head</span><br><span class="line">        <span class="keyword">while</span> slow <span class="keyword">and</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="Leetcode-142"><a href="#Leetcode-142" class="headerlink" title="Leetcode 142"></a>Leetcode 142</h2><blockquote>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.<br>Note: Do not modify the linked list.<br>Follow up:<br>Can you solve it without using extra space? </p>
</blockquote>
<p>分析：此题在 Leetcode 141的基础上，添加了若有环即返回其环起始位置的步骤。同 Leetcode 141分析中所述，若设定快指针每跑两步，慢指针跑一步，两者速度比为2:1，即在相同时间内，两者跑得距离之比也为2:1。如图，当有环时，设置b点为环的起始位置，m点为快慢指针第一次相遇的位置，hb距离为x1，b到m距离为x2，m到b的距离为x3。由于同一起点出发，在相同时间内两者跑的距离之比为2:1，所以当他们在m点相遇时有 x1+x2+x3+x2 = 2(x1+x2)，即x1 = x3。 </p>
<img src="/2019/11/13/Leetcode141-142%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E8%A7%A3%E6%B3%95/image.png" class="" title="image">



<p>当快慢指针在m点相遇后，慢指针从m点出发，head指针从h点同时出发并以相同的速度前行，由于x1=x3，因此两者会在b点，即环的起始位置相遇。 </p>
<p> Python代码： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                <span class="keyword">while</span> slow != head:</span><br><span class="line">                    slow = slow.next</span><br><span class="line">                    head = head.next</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>
